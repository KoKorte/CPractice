//Lisätään tarvittavat kirjastot
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>


//Tehdään ristinolla peli
//------------------------------
//Mitä tarvitaan?
//--------------------------------
/*SUUNNITELMA(ei lopullinen)
//------------------------------
-C-kieli
-Aluksi 2 pelaajaa X ja O
-{0,0,0}
 {0,0,0}
 {0,0,0}
 (define taulukko?)
-STRUCT ruudukot?
 -OHJE KUINKA PELATA
-Mahdollisest x akseli 123 ja y akseli ABC
-Kysyy käyttäjältä vuoron perään akselin malliin 1A tai 3B
(printf("\nAnna x akseli: ");
   scanf("%d", x);
 printf("\nAnna y akseli: ");
   scanf("%c", y);)
-Tarkistetaan että "ruudussa" ei ole aiempaa merkkiä (if empty tai is taken?)
    -> uudelleen syöttö komento (define virhe input, syötä uudelleen?)
-Ei kahta samaa merkkiä peräkkäin(toinen virhe input?)


Mahdollisia myöhempiä toimintoja:
-Pelaaja 1 ja 2 nimet
-srand yksinpeli
-Valinta yksin- tai kaksinpelille
-Valinta haluaako olla X tai O


*/

//  OHJE
//
//Valitse kuka aloittaa ensin
//Syötä numero ja kirjain muodossa esim. 1A.
//Pelaaja X aloittaa ensin
//


// Määritellään struct Ruutu
struct Ruutu {
    char merkki; // 'X', 'O' tai ' '
};

// Funktio ruudukon näyttämiseksi
void näytäRuudukko(struct Ruutu ruudukko[3][3]) {
    printf("  1 2 3\n");
    for (int a = 0; a < 3; a++) {
        printf("%c", 'A' + a); // Tulostaa rivin kirjaimen (A, B, C)
        for (int b = 0; b < 3; b++) {
            printf("|%c", ruudukko[a][b].merkki); // Tulostaa ruudukon merkin ('X', 'O' tai ' ')
        }
        printf("|\n");
        if (a < 2) {
            printf("  -+-+-\n"); // Vaakaviiva erottaa rivit
        }
    }
}

// Tarkista voittoehdot
int tarkistaVoitto(struct Ruutu ruudukko[3][3], char merkki) {
    // Tarkista vaakasuorat ja pystysuorat voitot
    for (int a = 0; a < 3; a++) {
        if (ruudukko[a][0].merkki == merkki && ruudukko[a][1].merkki == merkki && ruudukko[a][2].merkki == merkki) {
            return 1; // Voitto
        }
        if (ruudukko[0][a].merkki == merkki && ruudukko[1][a].merkki == merkki && ruudukko[2][a].merkki == merkki) {
            return 1; // Voitto
        }
    }
    
    // Tarkista vinot voitot
    if (ruudukko[0][0].merkki == merkki && ruudukko[1][1].merkki == merkki && ruudukko[2][2].merkki == merkki) {
        return 1; // Voitto
    }
    if (ruudukko[0][2].merkki == merkki && ruudukko[1][1].merkki == merkki && ruudukko[2][0].merkki == merkki) {
        return 1; // Voitto
    }
    
    return 0; // Ei voittoa
}

int main() {
    // Alusta peliruudukko struct-olioilla
    struct Ruutu ruudukko[3][3];
    
    // Alusta ruudukko tyhjillä soluilla
    for (int a = 0; a < 3; a++) {
        for (int b = 0; b < 3; b++) {
            ruudukko[a][b].merkki = ' ';
        }
    }
    
    // Alusta vuoropelaaja
    char vuoro = 'X';
    int x, y;
    
    // Pelisilmukka
    do {
        // Näytä ruudukko
        näytäRuudukko(ruudukko);
        
        // Pyydä pelaajaa syöttämään siirtonsa
        printf("Pelaajan %c vuoro. Anna x-akseli (1-3) ja y-akseli (A-C): ", vuoro);
        scanf("%d %c", &x, &y);
        
        // Muunna y-akseli numeroiksi
        y = y - 'A';
        
        // Tarkista, onko siirto kelvollinen
        if (x < 1 || x > 3 || y < 0 || y > 2 || ruudukko[y][x - 1].merkki != ' ') {
            printf("Virheellinen siirto. Yritä uudelleen.\n");
            continue;
        }
        
        // Päivitä ruudukko
        ruudukko[y][x - 1].merkki = vuoro;
        
        // Tarkista voitto
        if (tarkistaVoitto(ruudukko, vuoro)) {
            näytäRuudukko(ruudukko);
            printf("Pelaaja %c voitti! Onnittelut!\n", vuoro);
            break;
        }
        
        // Vaihda vuoroa käyttämällä ternary operaattoria
        vuoro = (vuoro == 'X') ? 'O' : 'X';
        
    } while (1); // Pelisilmukka jatkuu loputtomiin, kunnes pelaaja voittaa
    
    return 0;
}




/*
//Luodaan define
//Luodaan taulukko
#define taulu

int main()
{
    struct taulu
    {
        char riviyla;
    };
    
 /*   rivi1 = {"0,0,0"};
    rivi2 = {"0,0,0"};
    rivi3 = {"0,0,0"};
*/
 //   int ruutu = a, b, c, d, e, f, g, h, i;

    printf("\nTAULUKKO\n");
    printf("\n%s", str(taulu(riviyla)));
    
/*
struct taulu
    {
        char eka = '0';
        char toka = '0';
        char kolmas = '0';
        char nelos = '0';
        char vitos = '0';
        char kutos = '0';
        char seiska = '0';
        char kasi = '0';
        char ysi = '0';
    };
*/

*/


    return 0;
}
